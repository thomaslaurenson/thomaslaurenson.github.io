{"version":3,"sources":["webpack:///./src/templates/image-blog.js","webpack:///./src/templates/blog-post.js"],"names":["ImageBlog","props","query","render","data","image","images","edges","find","n","node","relativePath","includes","filename","alt","fluid","childImageSharp","useStyles","makeStyles","theme","styledLink","textDecoration","color","margin","BlogPostTemplate","classes","post","markdownRemark","previous","next","title","frontmatter","description","excerpt","summary","maxWidth","className","itemScope","itemType","pb","container","item","xs","sm","display","pt","icon","faCalendarWeek","size","pl","variant","paragraph","date","justifyContent","tags","map","tag","index","key","to","kebabCase","rel","length","faTags","thumbnail","dangerouslySetInnerHTML","__html","html","itemProp","md","width","fields","slug","faArrowLeft","faArrowRight"],"mappings":"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","file":"component---src-templates-blog-post-js-78c896824ade026a0223.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst ImageBlog = props => (\n  <StaticQuery\n    query={graphql`\n      query {\n        images: allFile(filter: { sourceInstanceName: { eq: \"blog\" }, extension: {eq: \"png\"} }) {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                fluid(maxWidth: 960, maxHeight: 200, quality: 95) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      const image = data.images.edges.find(n => {\n        return n.node.relativePath.includes(props.filename)\n      })\n      if (!image) {\n        return null\n      }\n\n      return <Img alt={props.alt} fluid={image.node.childImageSharp.fluid} />\n    }}\n  />\n)\n\nexport default ImageBlog\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Container, Grid, Box, Typography, Divider } from \"@material-ui/core\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n  faCalendarWeek,\n  faTags,\n  faArrowLeft,\n  faArrowRight,\n} from \"@fortawesome/free-solid-svg-icons\"\n\nimport Layout from \"../components/layout\"\nimport Header from \"../components/header\"\nimport SEO from \"../components/seo\"\nimport ImageBlog from \"./image-blog\"\n\nconst useStyles = makeStyles(theme => ({\n  styledLink: {\n    textDecoration: \"none\",\n    color: \"black\",\n    \"&:hover\": {\n      color: \"#666666\",\n    },\n  },\n  \"@global\": {\n    \"ul li p\": {\n      margin: 0,\n    },\n  },\n}))\n\nconst BlogPostTemplate = ({ data }) => {\n  const classes = useStyles()\n  const post = data.markdownRemark\n  const { previous, next } = data\n\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <Header\n        title={post.frontmatter.title}\n        summary={post.frontmatter.description}\n      />\n      <Container maxWidth=\"md\">\n        <article\n          className=\"post\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <Box pb={2}>\n              <Grid container>\n                <Grid item xs={12} sm={6}>\n                  <Box display=\"flex\" pt={1}>\n                    <Box>\n                      <FontAwesomeIcon icon={faCalendarWeek} size=\"lg\" />\n                    </Box>\n                    <Box pl={2}>\n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"body1\"\n                        paragraph={false}\n                      >\n                        {post.frontmatter.date}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Box display=\"flex\" justifyContent=\"flex-end\" pt={1}>\n                    <Box>\n                      {post.frontmatter.tags.map((tag, index) => [\n                        <Typography display=\"inline\" key={index}>\n                          <Link\n                            to={`/tags/${kebabCase(tag)}/`}\n                            rel=\"prev\"\n                            className={classes.styledLink}\n                          >\n                            {tag}\n                          </Link>\n                          {post.frontmatter.tags.length !== index + 1\n                            ? \",\\u00A0\"\n                            : \"\"}\n                        </Typography>,\n                      ])}\n                    </Box>\n                    <Box pl={2}>\n                      <FontAwesomeIcon icon={faTags} size=\"lg\" />\n                    </Box>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Box>\n          </header>\n\n          <Box pb={3}>\n            <ImageBlog\n              alt={post.frontmatter.thumbnail}\n              filename={post.frontmatter.thumbnail}\n            />\n          </Box>\n\n          <section\n            dangerouslySetInnerHTML={{ __html: post.html }}\n            itemProp=\"articleBody\"\n          />\n          <Divider />\n        </article>\n        <nav className=\"post-nav\">\n          <Box pb={5}>\n            <Grid container>\n              <Grid item xs={12} sm={12} md={6}>\n                <Box display=\"flex\" width={\"100%\"} justifyContent=\"flex-start\">\n                  {previous && (\n                    <Link\n                      to={previous.fields.slug}\n                      rel=\"prev\"\n                      className={classes.styledLink}\n                    >\n                      <FontAwesomeIcon icon={faArrowLeft} />\n                      {` `}\n                      {previous.frontmatter.title}\n                    </Link>\n                  )}\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={12} md={6}>\n                <Box display=\"flex\" width={\"100%\"} justifyContent=\"flex-end\">\n                  {next && (\n                    <Link\n                      to={next.fields.slug}\n                      rel=\"next\"\n                      className={classes.styledLink}\n                    >\n                      {next.frontmatter.title}\n                      {` `}\n                      <FontAwesomeIcon icon={faArrowRight} />\n                    </Link>\n                  )}\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        </nav>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n        description\n        thumbnail\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}