{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-09-07/restricting-ssh-access-using-rssh/","result":{"data":{"site":{"siteMetadata":{"title":"Thomas Laurenson"}},"markdownRemark":{"id":"6755c232-5eee-5895-a189-53192f60f8d1","excerpt":"This post summarizes a simple method to secure, or lock-down, SSH access using the Restricted SSH () package. The basic premise, you can create a user with a…","html":"<p>This post summarizes a simple method to secure, or lock-down, SSH access using the <em>Restricted SSH</em> (<code class=\"language-text\">rssh</code>) package. The basic premise, you can create a user with a restricted shell and allow only specific protocols such as SCP or SFTP. There are many reasons to restrict SSH access or restrict SSH access to specific accounts. I used <code class=\"language-text\">rssh</code> on an assessment server in one of the papers I teach. I wanted students to be able to submit an assessment using a simple bash script, that SCP transferred a single file to a server. But, I did not want students to be able to log into the machine remotely - as they would be able to see assessment submissions from other students. </p>\n<p>This post documents the method I used to configure Restricted SSH on an Ubuntu Linux 18.04 server system, but the general principles can be applied to other Debian-based operating systems.</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#installing-rssh\">Installing RSSH</a></li>\n<li><a href=\"#creating-a-restricted-user-account\">Creating a Restricted User Account</a></li>\n<li><a href=\"#configuring-restricted-ssh\">Configuring Restricted SSH</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h2 id=\"installing-rssh\" style=\"position:relative;\"><a href=\"#installing-rssh\" aria-label=\"installing rssh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing RSSH</h2>\n<p>According to the <a href=\"https://packages.ubuntu.com/bionic/rssh\">Ubuntu Packages documentation for rssh</a>, the <code class=\"language-text\">rssh</code> package is in the <em>universe</em> repository. This specific repository should be enabled by default in Ubuntu server version 18.04, therefore, installation is easy using the following <code class=\"language-text\">apt</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt install rssh</code></pre></div>\n<h2 id=\"creating-a-restricted-user-account\" style=\"position:relative;\"><a href=\"#creating-a-restricted-user-account\" aria-label=\"creating a restricted user account permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Restricted User Account</h2>\n<p>The only requirement for restricting a user using the Restricted SSH package is to specify <code class=\"language-text\">/usr/bin/rssh</code> as the users default shell. This would replace the usual default shell, which in most cases would be <code class=\"language-text\">/bin/bash</code>. You can either specify the Restricted SSH shell on user creation (if you wanted to create a new, dedicated user) or change the shell for an existing user.</p>\n<p>The following command creates a new user named <code class=\"language-text\">student</code> that has the <code class=\"language-text\">rssh</code> shell specified as the default shell for the user. It also creates a home directory with the same naming convention as the username (<code class=\"language-text\">/home/student</code>). The home directory is not required, however, in my case I use the home directory as the SCP upload target.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo useradd -d /home/student -m -s /usr/bin/rssh student</code></pre></div>\n<p>You can also change the shell of an existing user account using the <code class=\"language-text\">chsh</code> command. The following command will change the shell for the <code class=\"language-text\">student</code> account to the <code class=\"language-text\">rssh</code> shell. </p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo chsh -s /usr/bin/rssh student</code></pre></div>\n<p>In both scenarios, make sure the user account has a password specified. This can be done with the <code class=\"language-text\">passwd</code> command. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo passwd student</code></pre></div>\n<h2 id=\"configuring-restricted-ssh\" style=\"position:relative;\"><a href=\"#configuring-restricted-ssh\" aria-label=\"configuring restricted ssh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring Restricted SSH</h2>\n<p>The Restricted SSH configuration file is stored at: <code class=\"language-text\">/etc/rssh.conf</code>. Using this configuration file, you can restrict what services a user can access. The following configurations are supported by Restricted SSH:</p>\n<ul>\n<li><code class=\"language-text\">allowscp</code>: User is allowed to use perform SCP transfers</li>\n<li><code class=\"language-text\">allowsftp</code>: User is allowed to use SFTP protocol and transfers</li>\n<li><code class=\"language-text\">allowcvs</code>: User is allowed to use the CVS service</li>\n<li><code class=\"language-text\">allowrdist</code>: User is allowed to use rdist transfers</li>\n<li><code class=\"language-text\">allowrsync</code>: User is allowed to use rsync transfers</li>\n</ul>\n<p>Once you have Restricted SSH installed, you can configure what services a user is allowed to use. Start by opening the configuration file (feel free to use <code class=\"language-text\">nano</code> if you are not comfortable with <code class=\"language-text\">vim</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo vim /etc/rssh.conf</code></pre></div>\n<p>The code snippet below displays the start of the Restricted SSH configuration file. I have only made one change, enabling SCP by uncommenting the <code class=\"language-text\">allowscp</code> line. Each configuration is easy to enable, simply remove the comment character (<code class=\"language-text\">#</code>) at the start of the required line.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\"># This is the default rssh config file\n\n# set the log facility.  \"LOG_USER\" and \"user\" are equivalent.\nlogfacility = LOG_USER\n\n# Leave these all commented out to make the default action for rssh to lock\n# users out completely...\n\nallowscp\n#allowsftp\n#allowcvs\n#allowrdist\n#allowrsync\n#allowsvnserve\n\n# set the default umask\numask = 022</code></pre></div>\n<p>Make sure to save the file before exiting. After the changes, the <code class=\"language-text\">student</code> account should only be allowed to perform SCP transfers, and should not have any other access to the system. To test this, try to log into the remote server using an SSH client. In the following example, the IP address of the server is <code class=\"language-text\">10.25.1.10</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">ssh student@10.25.1.10</code></pre></div>\n<p>It might initially seem that you can log in using SSH without error. The SSH session will start and present the user with a login prompt to enter the password. The server information is then displayed… However, an error message will be displayed, informing the user that the account is restricted by <code class=\"language-text\">rssh</code>. The following code snippet provides an example of the error message.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">manager@server:~$ ssh student@10.25.1.10\nstudent@10.25.1.10's password:\n...\nThis account is restricted by rssh.\nAllowed commands: scp\n\nIf you believe this is in error, please contact your system administrator.\n\nConnection to 10.25.1.10 closed.</code></pre></div>\n<p>Final test. We should make sure the server allows the <code class=\"language-text\">student</code> account to perform an SCP transfer. The following command attempts to copy a file from the local system to the remote server (<code class=\"language-text\">10.25.1.10</code>). In this case, the file being copied is named <code class=\"language-text\">kittens.png</code> and the file is being copied to the <code class=\"language-text\">/sharedData</code> directory on the remote server. It is essential to check that the target directory (<code class=\"language-text\">/sharedData</code> in this case) is accessible (writable) by the <code class=\"language-text\">student</code> account. Therefore, you need to set the ownership/permissions accordingly.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">scp -P 22 kittens.png student@10.25.1.10:\"/sharedData/\"</code></pre></div>\n<p>If everything is working correctly, the file should be copied to the remote server without error. The code snippet below displays an example of a successful transfer.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">user@server:~$ scp -P 22 kittens.png student@10.25.1.10:\"/sharedData\"\nstudent@10.25.1.10's password:\nkittens.png                          100%  107KB 107.0KB/s   00:00</code></pre></div>\n<p>In the case of an error, it might be useful to check the error code returned by the <code class=\"language-text\">scp</code> command. For example, you can use <code class=\"language-text\">echo $?</code> directly after running the <code class=\"language-text\">scp</code> command to see the error code to determine any problems with the transfer. Unfortunately, the <code class=\"language-text\">scp</code> man page does not document the error codes, but <a href=\"https://support.microfocus.com/kb/doc.php?id=7021696\">MicroFocus provide a list of SSH and SCP return codes</a>.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>This post covered a quick summary of how to restrict SSH access on an Ubuntu Linux 18.04 server. The Restricted SSH package could have a number of uses depending on your specific scenario. If you have any feedback or questions please post a comment below. Thanks!</p>","frontmatter":{"title":"Restricting SSH Access using rssh","date":"September 07, 2018","tags":["Security","Linux","Ubuntu","SSH"],"description":"Simple method to secure, or lock-down, SSH access using the Restricted SSH (rssh) package.","thumbnail":"ssh.png"}},"previous":{"fields":{"slug":"/blog/2018-07-21/dragino-lorashield-on-AU915/"},"frontmatter":{"title":"Dragino LoraShield on AU915"}},"next":{"fields":{"slug":"/blog/2018-09-14/disabling-components-local-jekyll-builds/"},"frontmatter":{"title":"Disabling Components on Local Jekyll Builds"}}},"pageContext":{"id":"6755c232-5eee-5895-a189-53192f60f8d1","previousPostId":"0980df65-e66b-535b-994e-530228c9a215","nextPostId":"5952516f-51ee-51f3-92d4-51e416520a58"}},"staticQueryHashes":["1771194231","2841359383","3880320062"]}