{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2021-08-06/building-a-wireguard-vpn/","result":{"data":{"site":{"siteMetadata":{"title":"Thomas Laurenson"}},"markdownRemark":{"id":"609e7839-fa27-56b8-875e-dcf54ba2c48c","excerpt":"Recently I had to set up a VPN for doing a pentest engagement. The main reason was I needed a static IP - something that I have to pay for from my lackluster…","html":"<p>Recently I had to set up a VPN for doing a pentest engagement. The main reason was I needed a static IP - something that I have to pay for from my lackluster ISP. Instead, I set up a WireGuard VPN on a cloud VPS - based on advice from a SysAdmin friend. This blog post documents my process on setting up WireGuard on a fresh Digital Ocean Droplet (VPS) and covers some things I didn’t find in some other tutorials.</p>\n<p>The main difference between other tutorials I read - I wanted a VPN for internet access only! I didn’t care about having a VPN to get a secure connection to an internal network - such as a cloud VPC. Read on if you want the same thing!</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#initial-vps-configuration\">Initial VPS Configuration</a></li>\n<li>\n<p><a href=\"#install-and-configure-wireguard-on-the-server\">Install and Configure Wireguard on the Server</a></p>\n<ul>\n<li><a href=\"#generate-the-encryption-keys-for-the-server\">Generate the Encryption Keys for the Server</a></li>\n<li><a href=\"#configure-wireguard-on-the-server\">Configure WireGuard on the Server</a></li>\n<li><a href=\"#configure-firewall-rules\">Configure Firewall Rules</a></li>\n<li><a href=\"#enable-ip-forwarding\">Enable IP Forwarding</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#install-and-configure-wireguard-on-the-client\">Install and Configure Wireguard on the Client</a></p>\n<ul>\n<li><a href=\"#generate-the-encryption-keys-for-the-client\">Generate the Encryption Keys for the Client</a></li>\n<li><a href=\"#configure-wireguard-on-the-client\">Configure WireGuard on the Client</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#back-to-the-server\">Back to the Server!</a></p>\n<ul>\n<li><a href=\"#add-the-client-conf-to-the-vpn-server\">Add the Client Conf to the VPN Server</a></li>\n<li><a href=\"#start-the-vpn-server\">Start the VPN Server</a></li>\n</ul>\n</li>\n<li><a href=\"#connect-to-the-vpn-server-from-the-client\">Connect to the VPN server from the Client!</a></li>\n<li><a href=\"#troubleshooting\">Troubleshooting</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h2 id=\"initial-vps-configuration\" style=\"position:relative;\"><a href=\"#initial-vps-configuration\" aria-label=\"initial vps configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initial VPS Configuration</h2>\n<p>I use Digital Ocean for VPS hosting. It is simple and cheap, and the pricing plans are no-nonsense. I picked a VPS, or what they call <em>Droplets</em>, with the following configuration:</p>\n<ul>\n<li>Image: Ubuntu 20.04 LTS x64</li>\n<li>Plan: Basic > Regular Intel with SSD, $5 / month</li>\n<li>Datacenter: Choose the best option based on my location and target location</li>\n</ul>\n<p>It makes sense to do an initial server configuration, mainly some hardening and security best practices. Digital Ocean recommends it, and so do I! There is even an <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Initial Server Setup with Ubuntu 20.04</a> provided by Digital Ocean. My usual setup is generally the same, with a couple of quirks.</p>\n<p>Start by logging in with <code class=\"language-text\">root</code> and providing the SSH key you used during Droplet creation.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">ssh -i ssh_key root@droplet_public_ip</code></pre></div>\n<p>Firsts things first… do an update.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt update\nsudo apt upgrade</code></pre></div>\n<p>The next thing I do is set up an <code class=\"language-text\">iptables</code> firewall. Digital Ocean recommends using <code class=\"language-text\">uwf</code>. It might be good?! I have never used it. Anyway, I usually do a simple configuration to start with:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo iptables -A INPUT -m state --state INVALID -j DROP\nsudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\nsudo iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\nsudo iptables -A INPUT -i lo -j ACCEPT\nsudo iptables -P INPUT DROP</code></pre></div>\n<p>The next step is to create a new user, so we can avoid using the <code class=\"language-text\">root</code> account. The commands listed below are a good solution. You can change the username <code class=\"language-text\">thomas</code> to match your own configuration.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo useradd -d /home/thomas -m -G sudo -s /bin/bash thomas\nmkdir /home/thomas/.ssh\ncp /root/.ssh/authorized_keys /home/thomas/.ssh/\nchown -R thomas:thomas /home/thomas/.ssh\nchmod 700 /home/thomas/.ssh\nchmod 600 /home/thomas/.ssh/authorized_keys</code></pre></div>\n<p>As a summary:</p>\n<ul>\n<li>Create a user called <code class=\"language-text\">thomas</code></li>\n<li>Make a directory called <code class=\"language-text\">.ssh</code> in the new users home folder</li>\n<li>Copy the SSH key used during Droplet creation</li>\n<li>Change the ownership and permissions of the newly created SSH directories/files</li>\n</ul>\n<p>Quick caveat… you probably should have a different SSH key for the <code class=\"language-text\">root</code> and normal user account. That would be security best practices.</p>\n<p>Finally, create a password for the new account:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">passwd thomas</code></pre></div>\n<p>And then exit the SSH session with the <code class=\"language-text\">root</code> user.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">exit</code></pre></div>\n<p>And log back in using the new user account.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">ssh -i ssh_key thomas@droplet_public_ip</code></pre></div>\n<h2 id=\"install-and-configure-wireguard-on-the-server\" style=\"position:relative;\"><a href=\"#install-and-configure-wireguard-on-the-server\" aria-label=\"install and configure wireguard on the server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install and Configure Wireguard on the Server</h2>\n<p>So far we have a new VPS, and did a basic setup. Now we will create the encryption keys and configuration file for the WireGuard VPN server. Start by installing the <code class=\"language-text\">wireguard</code> package:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt install wireguard</code></pre></div>\n<p>For the next few steps, we will switch to the <code class=\"language-text\">root</code> account. This makes life easier, as the WireGuard configuration requires <code class=\"language-text\">root</code> access for almost all commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo -i</code></pre></div>\n<h3 id=\"generate-the-encryption-keys-for-the-server\" style=\"position:relative;\"><a href=\"#generate-the-encryption-keys-for-the-server\" aria-label=\"generate the encryption keys for the server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generate the Encryption Keys for the Server</h3>\n<p>Start by creating some keys for the WireGuard server.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd /etc/wireguard/\numask 077; wg genkey | tee privatekey | wg pubkey > publickey</code></pre></div>\n<p>Verify the keys were created.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cat privatekey\nQNZqC+to/q+DQqJV3vDTRGRrO62GHkffRyuJFbtY91M=\ncat publickey\n6w9lu0iQu5pf2/vKnGzFJYoY3Ci2v3GNj3U6A3a2Gyg=</code></pre></div>\n<p>You will need these keys throughout the configuration so make sure you know where to find them. Make sure to keep these keys (especially the private key) safe and secure!</p>\n<h3 id=\"configure-wireguard-on-the-server\" style=\"position:relative;\"><a href=\"#configure-wireguard-on-the-server\" aria-label=\"configure wireguard on the server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure WireGuard on the Server</h3>\n<p>You should still be in the same directory from the last section: <code class=\"language-text\">/etc/wireguard</code>. In this directory, we want to create a configuration file to store all the settings for our VPN server. Start by creating the configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">touch /etc/wireguard/wg0.conf</code></pre></div>\n<p>And put in the following information. Note, you will need to change the <code class=\"language-text\">PrivateKey</code> value to the value of the <code class=\"language-text\">privatekey</code> that you created in the previous step. Also, note that there is a <code class=\"language-text\">PLACEHOLDER</code> value in the <code class=\"language-text\">PublicKey</code> for the “Peer” or client - we will replace this after configuring at least one client.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Interface]\nAddress = 10.0.0.1/24\nListenPort = 51820\nPrivateKey = KFjLKgGlI43XzO74QccLvjkhxW4yFL/1eKro7p5ib2I=\nPostUp = /etc/wireguard/up.sh\nPostDown = /etc/wireguard/down.sh\n\n[Peer]\nPublicKey = 3tpwRGFdhPqDJdXufDSQCoDw8WoBHuaa7paoh/FeoF0=\nAllowedIPs = 10.0.0.2/24</code></pre></div>\n<p>Here is a brief description of these properties we are setting:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Interface</code>: Section for configuration of the server</p>\n<ul>\n<li><code class=\"language-text\">Address</code>: The IP address of the server in the VPN network</li>\n<li><code class=\"language-text\">ListenPort</code>: The port number WireGuard will run on</li>\n<li><code class=\"language-text\">PrivateKey</code>: The servers private key that we just generated</li>\n<li><code class=\"language-text\">PostUp</code>: Commands that will be run when the VPN server starts</li>\n<li><code class=\"language-text\">PostDown</code>: Commands that will be run when the VPN server stops</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Peer</code>: Section for configuration of clients</p>\n<ul>\n<li><code class=\"language-text\">PublicKey</code>: The public key of the client, which we have not yet created</li>\n<li><code class=\"language-text\">AllowedIPs</code>: The IP address of the client on the VPN network, which we will also configure on the client</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"configure-firewall-rules\" style=\"position:relative;\"><a href=\"#configure-firewall-rules\" aria-label=\"configure firewall rules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Firewall Rules</h3>\n<p>In the <code class=\"language-text\">wg0.conf</code> file we had two scripts added, one for <code class=\"language-text\">PostUp</code> and one for <code class=\"language-text\">PostDown</code>. These scripts are run when the WireGuard VPN starts and stops. You can put anything in these scripts, but a common method is to include firewall rules to allow traffic in after starting the server, and remove those rules when the server is stopped.</p>\n<p>Start by creating the <code class=\"language-text\">up.sh</code> script.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">touch /etc/wireguard/up.sh</code></pre></div>\n<p>And enter the following information.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\niptables -A INPUT -i eth0 -p udp --dport 51820 -j ACCEPT\niptables -A INPUT -i wg0 -j ACCEPT\niptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE\niptables -A FORWARD -i wg0 -o eth0 -j ACCEPT\niptables -A FORWARD -i eth0 -o wg0 -j ACCEPT</code></pre></div>\n<p>As a quick summary, these rules will:</p>\n<ul>\n<li>Allow incoming traffic on port <code class=\"language-text\">51820</code></li>\n<li>Allow incoming traffic on the <code class=\"language-text\">wg0</code> interface</li>\n<li>Allow routed traffic out through <code class=\"language-text\">eth0</code> gets the server’s public IP (NAT)</li>\n<li>Allow traffic to be forwarded between <code class=\"language-text\">eth0</code> and <code class=\"language-text\">wg0</code> - in both directions</li>\n</ul>\n<p>Make sure the script is executable.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">chmod +x /etc/wireguard/up.sh</code></pre></div>\n<p>Now we will do the same for the <code class=\"language-text\">PostDown</code> script, called <code class=\"language-text\">down.sh</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">touch /etc/wireguard/down.sh</code></pre></div>\n<p>And enter the following information.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\niptables -D INPUT -i eth0 -p udp --dport 51820 -j ACCEPT\niptables -D INPUT -i wg0 -j ACCEPT\niptables -t nat -D POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE\niptables -D FORWARD -i wg0 -o eth0 -j ACCEPT\niptables -D FORWARD -i eth0 -o wg0 -j ACCEPT</code></pre></div>\n<p>These are the same as the <code class=\"language-text\">up.sh</code> rules, apart from that we are removing all of them. Make sure the script is executable.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">chmod +x /etc/wireguard/down.sh</code></pre></div>\n<h3 id=\"enable-ip-forwarding\" style=\"position:relative;\"><a href=\"#enable-ip-forwarding\" aria-label=\"enable ip forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enable IP Forwarding</h3>\n<p>The final step on the server is to allow IP forwarding.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">vim /etc/sysctl.conf</code></pre></div>\n<p>Find the line with <code class=\"language-text\">net.ipv4.ip_forward</code> in it. It is set to a default of false - which is the value <code class=\"language-text\">0</code>. We need to set this to true - the value of <code class=\"language-text\">1</code>, to allow IPv4 traffic to be forwarded.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">net.ipv4.ip_forward=1</code></pre></div>\n<p>Make sure the changes take effect by running the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sysctl -p</code></pre></div>\n<h2 id=\"install-and-configure-wireguard-on-the-client\" style=\"position:relative;\"><a href=\"#install-and-configure-wireguard-on-the-client\" aria-label=\"install and configure wireguard on the client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install and Configure Wireguard on the Client</h2>\n<p>In my scenario, I configured my VPN client to be a Kali Linux client - but WireGuard supports a variety of clients and some funky methods for easily adding new clients. Start by installing the WireGuard package on the client.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt install wireguard</code></pre></div>\n<p>Like the server configuration, we will switch to the <code class=\"language-text\">root</code> account. This makes life easier, as the WireGuard configuration requires <code class=\"language-text\">root</code> access for almost all commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo -i</code></pre></div>\n<h3 id=\"generate-the-encryption-keys-for-the-client\" style=\"position:relative;\"><a href=\"#generate-the-encryption-keys-for-the-client\" aria-label=\"generate the encryption keys for the client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generate the Encryption Keys for the Client</h3>\n<p>Start by creating some keys for the WireGuard client.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd /etc/wireguard/\numask 077; wg genkey | tee privatekey | wg pubkey > publickey</code></pre></div>\n<p>Verify the keys were created.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cat privatekey \nsg2+yeFqYualz5qop9XiIMxU1cA5BjOkJdCaf8zgNi8=\ncat publickey \neFbLx3CQV5uFh9SIHBuJn/LzPdcWMsUmPYaDk5eeXFo=</code></pre></div>\n<p>Again, you will need these keys throughout the configuration so make sure you know where to find them.</p>\n<h3 id=\"configure-wireguard-on-the-client\" style=\"position:relative;\"><a href=\"#configure-wireguard-on-the-client\" aria-label=\"configure wireguard on the client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure WireGuard on the Client</h3>\n<p>You should still be in the same directory from the last section: <code class=\"language-text\">/etc/wireguard</code>. In this directory, we want to create a configuration file to store all the settings for our VPN client. Start by creating the configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">touch /etc/wireguard/wg0.conf</code></pre></div>\n<p>And enter the following configuration in the file.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">[Interface]\nAddress = 10.0.0.2/24\nPostUp = wg set %i private-key /etc/wireguard/privatekey\nPostUp = ping -c1 10.0.0.1\n\n[Peer]\nPublicKey = 6w9lu0iQu5pf2/vKnGzFJYoY3Ci2v3GNj3U6A3a2Gyg=\nEndpoint = PLACEHOLDER:51820\nAllowedIPs = 0.0.0.0/0</code></pre></div>\n<p>Same as for the server configuration, here is a quick description of the client configuration.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Interface</code>: Configuration of the client</p>\n<ul>\n<li><code class=\"language-text\">Address</code>: The IP address for the client on the VPN. This should match the <code class=\"language-text\">AllowedIPs</code> value we set in the server.</li>\n<li><code class=\"language-text\">PostUp</code>: Commands run when the client connects to the VPN, in this case setting the private key using the <code class=\"language-text\">wg</code> command.\n<code class=\"language-text\">PostUp</code>: Also ping the VPN server when connecting to make sure we have established a connection. The server will not start if this command fails.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Peer</code>: Configuration of the server</p>\n<ul>\n<li><code class=\"language-text\">PublicKey</code>: The server’s public key that we created at the start of this tutorial.</li>\n<li><code class=\"language-text\">EndPoint</code>: The <strong>public IP</strong> address of your server. You will need to replace <code class=\"language-text\">PLACEHOLDER</code> with the IP address of your server.</li>\n<li><code class=\"language-text\">AllowedIPs</code>: The IP addresses the server allows.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"back-to-the-server\" style=\"position:relative;\"><a href=\"#back-to-the-server\" aria-label=\"back to the server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Back to the Server!</h2>\n<p>So far we have installed and configured the VPN server and client. But we still need to do a couple of things to get them to talk and be friends.</p>\n<h3 id=\"add-the-client-conf-to-the-vpn-server\" style=\"position:relative;\"><a href=\"#add-the-client-conf-to-the-vpn-server\" aria-label=\"add the client conf to the vpn server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add the Client Conf to the VPN Server</h3>\n<p>Start by opening the WireGuard configuration file on the server. FYI - if you have exited your <code class=\"language-text\">sudo</code> shell, you will need to prefix this command with <code class=\"language-text\">sudo</code>, or switch the user to <code class=\"language-text\">root</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">vim /etc/wireguard/wg0.conf</code></pre></div>\n<p>We need to add the public key of the client into our VPN server configuration. This will allow us to connect with our VPN client. We couldn’t do this before, as we didn’t know the public key of the client - as we hadn’t created it yet. Additionally, if you add more VPN clients, you will need to rinse and repeat this process.</p>\n<p>In the <code class=\"language-text\">PublicKey</code> value, add the value of the client’s public key. In this tutorial, the client’s public key was <code class=\"language-text\">eFbLx3CQV5uFh9SIHBuJn/LzPdcWMsUmPYaDk5eeXFo=</code>.</p>\n<p>Make sure to save and exit the file. Below is a final version of my server configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">[Interface]\nAddress = 10.0.0.1/24\nListenPort = 51820\nPrivateKey = QNZqC+to/q+DQqJV3vDTRGRrO62GHkffRyuJFbtY91M=\nPostUp = /etc/wireguard/up.sh\nPostDown = /etc/wireguard/down.sh\n\n[Peer]\nPublicKey = eFbLx3CQV5uFh9SIHBuJn/LzPdcWMsUmPYaDk5eeXFo=\nAllowedIPs = 10.0.0.2/24</code></pre></div>\n<h3 id=\"start-the-vpn-server\" style=\"position:relative;\"><a href=\"#start-the-vpn-server\" aria-label=\"start the vpn server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start the VPN Server</h3>\n<p>With everything configured, we can go ahead and start the VPN server, on the server. This will start the VPN service and allow clients to connect to the server. Luckily, this is simple with WireGuard.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo wg-quick up wg0</code></pre></div>\n<p>To see the WireGuard-specific details of the interface, you can run the following command and get some basic information.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">wg</code></pre></div>\n<p>If you have finished using the VPN server, and want to stop it, issue the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">wg-quick down wg0</code></pre></div>\n<p>I always start my VPN server manually, as I use it only for specific edge cases. But if you want to automatically start your VPN server on every system reboot, you can issue the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">systemctl enable wg-quick@wg0</code></pre></div>\n<h2 id=\"connect-to-the-vpn-server-from-the-client\" style=\"position:relative;\"><a href=\"#connect-to-the-vpn-server-from-the-client\" aria-label=\"connect to the vpn server from the client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connect to the VPN server from the Client!</h2>\n<p>Now that the VPN server is up and running, and the client is already configured - we can simply connect to the server. This is the same command as used to start the VPN server.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo wg-quick up wg0</code></pre></div>\n<p>You should get some information similar to below.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">└─# sudo wg-quick up wg0\n\n[#] ip link add wg0 type wireguard\n[#] wg setconf wg0 /dev/fd/63\n[#] ip -4 address add 10.0.0.2/24 dev wg0\n[#] ip link set mtu 1420 up dev wg0\n[#] wg set wg0 fwmark 51820\n[#] ip -4 route add 0.0.0.0/0 dev wg0 table 51820\n[#] ip -4 rule add not fwmark 51820 table 51820\n[#] ip -4 rule add table main suppress_prefixlength 0\n[#] sysctl -q net.ipv4.conf.all.src_valid_mark=1\n[#] nft -f /dev/fd/63\n[#] wg set wg0 private-key /etc/wireguard/privatekey\n[#] ping -c1 10.0.0.1\nPING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.\n64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=397 ms\n\n--- 10.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 397.253/397.253/397.253/0.000 ms</code></pre></div>\n<p>To test the connection, try pinging an Internet-accessible site, for example, <code class=\"language-text\">google.com</code>. If not working, try pinging any publicly available IP address, for example, <code class=\"language-text\">8.8.8.8</code>.</p>\n<p>Make sure you check your IP address to see if you have connected to the VPN and your traffic is being routered correctly. You can use any “What is my public IP” service on the Internet, or a variety of Linux commands, such as:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">dig +short myip.opendns.com @resolver1.opendns.com</code></pre></div>\n<p>If you don’t have the <code class=\"language-text\">dig</code> command, you can use <code class=\"language-text\">host</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">host myip.opendns.com resolver1.opendns.com</code></pre></div>\n<p>And to disconnect.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo wg-quick down wg0</code></pre></div>\n<h2 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h2>\n<p>A couple of commands that I found useful when trying to troubleshoot the WireGuard configuration are:</p>\n<ul>\n<li><code class=\"language-text\">wg</code> on the server to check VPN status, clients, and configuration</li>\n<li><code class=\"language-text\">ip a</code> on either machine to check IP addresses and the <code class=\"language-text\">wg0</code> network interface</li>\n</ul>\n<p>The hardest thing I found when initially configuring WireGuard is that each tutorial has different goals - find the tutorial that matches your goal. Additionally, check you have the correct keys in the configuration files, and that most errors are due to configuration problems! If things are not working, make one change and test again! Then make another change and test again!</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>I documented the steps I used to configure WireGuard, and made this tutorial so I can review this information the next time I need to configure a WireGuard VPN. But I hope it was on use to others. This is a very simple configuration, and I only use it on the throw-away VPS server. There are many additional configuration steps you should implement to make your VPN server more secure and robust! Happy hacking everyone!</p>","frontmatter":{"title":"Building a WireGuard VPN","date":"August 06, 2021","tags":["WireGuard","VPN","Linux"],"description":"Tutorial of how I built a WireGuard VPN to get a static IP, and for anonymous Internet access.","thumbnail":"wireguard.png"}},"previous":{"fields":{"slug":"/blog/2021-03-05/gta3-on-the-retropie/"},"frontmatter":{"title":"Grand Theft Auto 3 on the RetroPie"}},"next":null},"pageContext":{"id":"609e7839-fa27-56b8-875e-dcf54ba2c48c","previousPostId":"e90a0fa8-2fc4-5f94-a0bc-caf8545e7f35","nextPostId":null}},"staticQueryHashes":["1771194231","2841359383","3880320062"]}