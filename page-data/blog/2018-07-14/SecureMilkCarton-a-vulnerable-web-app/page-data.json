{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-07-14/SecureMilkCarton-a-vulnerable-web-app/","result":{"data":{"site":{"siteMetadata":{"title":"Thomas Laurenson"}},"markdownRemark":{"id":"b0fd7acc-efe9-5dc7-9f34-efb80df2b9f1","excerpt":"This post documents a security project I have written, SecureMilkCarton - an intentionally vulnerable Java web application that runs on Apache Tomcat.  Contents…","html":"<p>This post documents a security project I have written, SecureMilkCarton - an intentionally vulnerable Java web application that runs on Apache Tomcat. </p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#project-background\">Project Background</a></li>\n<li><a href=\"#project-repository\">Project Repository</a></li>\n<li><a href=\"#project-exercises-and-answers\">Project Exercises and Answers</a></li>\n<li>\n<p><a href=\"#securemilkcarton-quick-start\">SecureMilkCarton: Quick Start</a></p>\n<ul>\n<li><a href=\"#option-1-build-script\">Option 1: Build Script</a></li>\n<li><a href=\"#option-2-docker\">Option 2: Docker</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#securemilkcarton-installation-using-build-script\">SecureMilkCarton: Installation using Build Script</a></p>\n<ul>\n<li><a href=\"#optional-install-better-history\">Optional: Install better history</a></li>\n<li><a href=\"#optional-changing-the-default-ports\">Optional: Changing the default ports</a></li>\n</ul>\n</li>\n<li><a href=\"#securemilkcarton-web-server-configuration\">SecureMilkCarton: Web Server Configuration</a></li>\n<li><a href=\"#securemilkcarton-project-structure\">SecureMilkCarton: Project Structure</a></li>\n<li>\n<p><a href=\"#securemilkcarton-general-usage\">SecureMilkCarton: General Usage</a></p>\n<ul>\n<li><a href=\"#how-to-create-the-database\">How to create the database</a></li>\n<li><a href=\"#how-to-delete-and-recreate-the-database\">How to delete and recreate the database</a></li>\n<li><a href=\"#how-to-compile-and-deploy\">How to compile and deploy</a></li>\n<li><a href=\"#how-to-access-the-web-application\">How to access the web application</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>It seems vulnerable web applications for learning <em>hacking</em> or <em>penetration testing</em> are a dime-a-dozen. SecureMilkCarton is different, it has been specifically designed to learn <em>how to secure a poorly written web application</em> and <em>how to secure a web server</em>. </p>\n<p>The web application itself is riddled with security issues, including:</p>\n<ul>\n<li>Vulnerable to SQL injection attacks</li>\n<li>Vulnerable to XSS attacks</li>\n<li>Access control issues</li>\n<li>Bad password storage practices</li>\n</ul>\n<p>To add to the problem, the web server used to host the web application also suffers from a collection of security issues, including:</p>\n<ul>\n<li>Non-existent firewall</li>\n<li>Poorly configured MySQL database</li>\n<li>No HTTPS configured</li>\n<li>Default SSH configuration</li>\n<li>Bad practice implementing security-related HTTP headers</li>\n</ul>\n<h2 id=\"project-background\" style=\"position:relative;\"><a href=\"#project-background\" aria-label=\"project background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Background</h2>\n<p>SecureMilkCarton is written in Java and deployed on Apache Tomcat. I am by no means a Java expert or a Java fan - not a hater, just have never really written in it… So why write it in Java? Well, the web application is the resultant product of a practical assessment I developed for the <em>Introduction to Information Security</em> course that I teach. This course is situated in the same semester that students are taking the Programming 3 paper in, you guessed it, the Java programming language. It has a MySQL database for user authentication and web application data storage. Again, SQL was chosen as students are also taking a Databases 2 paper which covers relational databases. So, the applications used to seem like a good fit for the degree.</p>\n<p>Since SecureMilkCarton was specifically designed for my <em>Introduction to Information Security</em> course, it targets the level of the paper. This course is situated in the second year of a Bachelor of Information Technology degree. It is the first security-related paper students have taken, and only have 1 year of experience in the IT field. So it targets that general level. However, students do have a collection of practical labs and worksheets that guide them through the general framework of performing a security audit. Additionally, the assessment could easily be scaled up or down depending on specific requirements.</p>\n<h2 id=\"project-repository\" style=\"position:relative;\"><a href=\"#project-repository\" aria-label=\"project repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Repository</h2>\n<p>The SecureMilkCarton project is hosted on my GitHub account, available at: <a href=\"https://github.com/thomaslaurenson/SecureMilkCarton\">SecureMilkCarton</a></p>\n<p>The repository is well documented, so please look over the <a href=\"https://github.com/thomaslaurenson/SecureMilkCarton/blob/master/README.md\">README</a> for technical documentation including installation, configuration, vulnerabilities, project structure, and some general usage examples.</p>\n<h2 id=\"project-exercises-and-answers\" style=\"position:relative;\"><a href=\"#project-exercises-and-answers\" aria-label=\"project exercises and answers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Exercises and Answers</h2>\n<p>Included with SecureMilkCarton are a collection of tasks, somewhat similar to the assessment I wrote for my <em>Introduction to Information Security</em> course. The tasks and answers are provided in the folder called <code class=\"language-text\">exercises</code> in a PDF named <code class=\"language-text\">exercises.pdf</code> and <code class=\"language-text\">answers.pdf</code>. Since I want this project to be used by other tertiary institutes, the exercises and model answers are encrypted and can only be accessed with a password. This password can be provided to faculty members who can prove that they are teaching courses in accredited educational institutes. Please email me for additional information.</p>\n<h2 id=\"securemilkcarton-quick-start\" style=\"position:relative;\"><a href=\"#securemilkcarton-quick-start\" aria-label=\"securemilkcarton quick start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SecureMilkCarton: Quick Start</h2>\n<h3 id=\"option-1-build-script\" style=\"position:relative;\"><a href=\"#option-1-build-script\" aria-label=\"option 1 build script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 1: Build Script</h3>\n<ul>\n<li>Install Ubuntu 18.04 server on a VM</li>\n<li>Make sure git is installed:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt install git</code></pre></div>\n<ul>\n<li>Clone this repository to your home directory:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~ && git clone https://github.com/thomaslaurenson/SecureMilkCarton.git</code></pre></div>\n<ul>\n<li>\n<p>Run the web application build script:</p>\n<ul>\n<li>You will be prompted for the MySQL root user password, use: <code class=\"language-text\"></code>passw0rd`</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~/SecureMilkCarton/build && chmod u+x build.sh && sudo ./build.sh</code></pre></div>\n<ul>\n<li>Check the web application in a web browser:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\"><server-ip-address>:8080/securemilkcarton/</code></pre></div>\n<h3 id=\"option-2-docker\" style=\"position:relative;\"><a href=\"#option-2-docker\" aria-label=\"option 2 docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 2: Docker</h3>\n<ul>\n<li>Make sure git is installed:</li>\n<li>Clone this repository to your home directory:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~ && git clone https://github.com/thomaslaurenson/SecureMilkCarton.git</code></pre></div>\n<ul>\n<li>Install Docker and Docker Compose:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt install docker docker-compose</code></pre></div>\n<ul>\n<li>Run Docker Compose:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~/SecureMilkCarton/docker && docker-compose up</code></pre></div>\n<ul>\n<li>Check the web application in a web browser:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\"><server-ip-address>:8080/securemilkcarton/</code></pre></div>\n<h2 id=\"securemilkcarton-installation-using-build-script\" style=\"position:relative;\"><a href=\"#securemilkcarton-installation-using-build-script\" aria-label=\"securemilkcarton installation using build script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SecureMilkCarton: Installation using Build Script</h2>\n<p>The first step to install SecureMilkCarton is to install and configure a suitable virtual machine. This tutorial follows a virtual machine installed with Ubuntu Linux Server version 18.04 LTS that is hosted on VMWare vSphere (no notable differences in setup compared to VMWare Workstation).</p>\n<p>Create a new virtual machine and install using default options.</p>\n<p>When installed, make sure to update the operating system:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt update && sudo apt upgrade</code></pre></div>\n<p>Install VMWare tools (if using VMWare):</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt install open-vm-tools</code></pre></div>\n<p>Clone this repository to your home directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~\ngit clone https://github.com/thomaslaurenson/SecureMilkCarton.git</code></pre></div>\n<p>From here, you can use the <code class=\"language-text\">build.sh</code> script to install all required packages, configure the services, and then build and deploy the SecureMilkCarton web application.</p>\n<p>Make sure you are in the <code class=\"language-text\">build</code> directory of the git repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~/SecureMilkCarton/build</code></pre></div>\n<p>Make sure you have executable rights to the <code class=\"language-text\">build.sh</code> script:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">chmod u+x build.sh</code></pre></div>\n<p>Run the <code class=\"language-text\">build.sh</code> script using sudo rights:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo ./build.sh</code></pre></div>\n<h3 id=\"optional-install-better-history\" style=\"position:relative;\"><a href=\"#optional-install-better-history\" aria-label=\"optional install better history permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional: Install better history</h3>\n<p>I find when deploying this assessment for learners, it is beneficial to improve the history retention, that is, the information retained by the <code class=\"language-text\">~/.bash_history</code> file and associated <code class=\"language-text\">history</code> command. This project includes a simple script (<code class=\"language-text\">better_history.sh</code>) that enhances the history configuration, including:</p>\n<ul>\n<li>Preserves history when multiple different connections to a system are established (e.g., multiple SSH or PuTTY sessions)</li>\n<li>Appends date/time stamps to each history entry</li>\n</ul>\n<p>To include a better history, execute the following actions to run the script:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo su\ncd ~/SecureMilkCarton/build/\n./better_history.sh\nexit</code></pre></div>\n<h3 id=\"optional-changing-the-default-ports\" style=\"position:relative;\"><a href=\"#optional-changing-the-default-ports\" aria-label=\"optional changing the default ports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional: Changing the default ports</h3>\n<p>It might be easier to change the default Apache Tomcat ports. After a default installation, Apache Tomcat runs on the following ports:</p>\n<ul>\n<li>HTTP on port 8080</li>\n<li>HTTPS on port 8443 (if configured)</li>\n</ul>\n<p>For learners new to web applications, and web servers in general, it might be easier to configure Apache Tomcat to operate on default HTTP/HTTPS ports (80/443). The following instructions will make this configuration change using the <code class=\"language-text\">authbind</code> package.</p>\n<p>Install the <code class=\"language-text\">authbind</code> package:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo apt install authbind</code></pre></div>\n<p>Switch to the root user:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo su</code></pre></div>\n<p>Make port 80 and port 443 available to authbind, and set the owner to <code class=\"language-text\">tomcat</code> (this account is created during during the building of the web applicaiton):</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">touch /etc/authbind/byport/80\nchmod 500 /etc/authbind/byport/80\nchown tomcat /etc/authbind/byport/80\ntouch /etc/authbind/byport/443\nchmod 500 /etc/authbind/byport/443\nchown tomcat /etc/authbind/byport/443</code></pre></div>\n<p>Create a file named <code class=\"language-text\">setenv.sh</code> in the tomcat folder:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">vim /opt/tomcat/bin/setenv.sh</code></pre></div>\n<p>Enter the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">CATALINA_OPTS=\"-Djava.net.preferIPv4Stack=true\"</code></pre></div>\n<p>Open the tomcat start-up script:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">vim /opt/tomcat/bin/startup.sh</code></pre></div>\n<p>Find the following line:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">exec \"$PRGDIR\"/\"$EXECUTABLE\" start \"$@</code></pre></div>\n<p>And replace the line with:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">exec authbind --deep \"$PRGDIR\"/\"$EXECUTABLE\" start \"$@\" `</code></pre></div>\n<p>Finally, change the tomcat server configuration. Open the <code class=\"language-text\">server.xml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">vim /opt/tomcat/conf/server.xml</code></pre></div>\n<p>Find the entry for the service. This should be named <code class=\"language-text\">Catalina</code>, and should look like the output snippet below:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Service</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Catalina<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Connector</span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8080<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTTP/1.1<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">connectionTimeout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20000<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">redirectPort</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8443<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>This configuration file needs to be changed from the default Apache Tomcat ports to the new ports we specified above. The final result will look like the output snippet below. Basically, we just changed port 8080 to 80, and port 8443 to 443.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Service</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Catalina<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Connector</span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTTP/1.1<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">connectionTimeout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20000<span class=\"token punctuation\">\"</span></span>\n               <span class=\"token attr-name\">redirectPort</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>443<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Save and exit the files. Then restart the Apache Tomcat service:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo systemctl restart tomcat</code></pre></div>\n<p>Finished.</p>\n<p>An alternative method to the using authbind is to utilize <code class=\"language-text\">iptables</code> to forward traffic from the default HTTP/HTTPS ports to the ports tomcat uses. This method is simple, however, I feel it interferes with any <code class=\"language-text\">iptables</code> firewall configuration that can be used.</p>\n<p>The following two <code class=\"language-text\">iptables</code> rules will forward all traffic from port 80 and 443 to the default tomcat ports of 8080 and 8443. Please note, in the following example, the Internet-facing adapter is named <code class=\"language-text\">ens160</code>, you will need to modify this value for the network interface on your system (e.g., <code class=\"language-text\">eth0</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">sudo iptables -t nat -A PREROUTING -i ens160 -p tcp --dport 80 -j REDIRECT --to-port 8080\nsudo iptables -t nat -A PREROUTING -i ens160 -p tcp --dport 443 -j REDIRECT --to-port 8443</code></pre></div>\n<h2 id=\"securemilkcarton-web-server-configuration\" style=\"position:relative;\"><a href=\"#securemilkcarton-web-server-configuration\" aria-label=\"securemilkcarton web server configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SecureMilkCarton: Web Server Configuration</h2>\n<p>An SSH server has been installed using the OpenSSH software. However, no configuration has been performed. You can log in to the SSH service on port 22. The login details are any user account that has been created on the virtual machine.</p>\n<p>A MySQL database has been installed and partially configured. The credentials for the MySQL database are:</p>\n<ul>\n<li>Username: <code class=\"language-text\">root</code></li>\n<li>Password: <code class=\"language-text\">passw0rd</code></li>\n</ul>\n<p>Apache TomCat (a type of web server software) has also been installed on the server. The TomCat service is a Java Servlet Container – basically, a web server that allows the creation and sharing (via HTTP) of a web application written with Java on the server-side. Although the web application is very simple (compared to real-world web applications), getting used to the setup can take some practice. Here is some relevant information about the web application configuration:</p>\n<ul>\n<li>The web application is deployed in: <code class=\"language-text\">/opt/tomcat/webapps/</code></li>\n<li>The name of the web application is: <code class=\"language-text\">securemilkcarton</code></li>\n<li>The full location of the web application is: <code class=\"language-text\">/opt/tomcat/webapps/securemilkcarton</code></li>\n</ul>\n<h2 id=\"securemilkcarton-project-structure\" style=\"position:relative;\"><a href=\"#securemilkcarton-project-structure\" aria-label=\"securemilkcarton project structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SecureMilkCarton: Project Structure</h2>\n<p>The directory structure of the web application is very important to learn and understand to make good progress with the assignment. The following directory structure represents the web application:</p>\n<ul>\n<li><code class=\"language-text\">index.jsp</code>: the HTML code for the login web page</li>\n<li><code class=\"language-text\">search.jsp</code>: the HTML code for the employee search web page</li>\n<li><code class=\"language-text\">noticeboard.jsp</code>: the HTML code for the noticeboard web page</li>\n<li><code class=\"language-text\">style.css</code>: the CSS stylesheet for the website</li>\n<li><code class=\"language-text\">jquery.js</code>: the JQuery library dependency for the noticeboard web page</li>\n<li><code class=\"language-text\">securemilkcarton_logo.jpg</code>: the company logo to make things look pretty</li>\n<li>\n<p><code class=\"language-text\">WEB-INF</code>: a folder containing web application resources</p>\n<ul>\n<li>\n<p><code class=\"language-text\">classes</code>: a folder containing java code</p>\n<ul>\n<li><code class=\"language-text\">Login.java</code>: server-side code for the login web page</li>\n<li><code class=\"language-text\">Noticeboard.java</code>: server-side code for the noticeboard page</li>\n<li><code class=\"language-text\">Hashing.java</code>: server-side code for password hashing</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">lib</code>: a folder containing dependencies</p>\n<ul>\n<li><code class=\"language-text\">mysql-connector-java-5.1.42-bin.jar</code>: dependency jar file to connect to local MySQL database</li>\n<li>Other dependencies can be included in this folder</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">database</code>: a collection of files for database creation and re-creation:</p>\n<ul>\n<li><code class=\"language-text\">securemilkcarton_db.sql</code>: an SQL file containing all securemilkcarton database entries</li>\n<li><code class=\"language-text\">create_db.sh</code>: this script uses <code class=\"language-text\">securemilkcarton_db.sql</code> to automate creating the database</li>\n<li><code class=\"language-text\">recreate_db.sh</code>: this script deletes the old database and recreates the original database using the <code class=\"language-text\">securemilkcarton_db.sql</code> file</li>\n<li><code class=\"language-text\">passwords.csv</code>: a comma-separated values (CSV) file containing usernames, passwords and salt values. This file is useful when changing the password hashing algorithm</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">scripts</code>: a collection of scripts that make life easier:</p>\n<ul>\n<li><code class=\"language-text\">compile.sh</code>: a script to compile the Java source code and package the entire web application into a distributable .war file for deployment to the Tomcat server</li>\n<li><code class=\"language-text\">compile_simple.sh</code>: the same script contents as <code class=\"language-text\">compile.sh</code> file, but with the code commenting and error checking removed</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"securemilkcarton-general-usage\" style=\"position:relative;\"><a href=\"#securemilkcarton-general-usage\" aria-label=\"securemilkcarton general usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SecureMilkCarton: General Usage</h2>\n<p>This section documents several common scenarios that you will need to perform including creating the database for the web application, deleting the database, compiling the web application and how to access the web application.</p>\n<h3 id=\"how-to-create-the-database\" style=\"position:relative;\"><a href=\"#how-to-create-the-database\" aria-label=\"how to create the database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to create the database</h3>\n<p>The database is essential for the SecureMilkCarton web application to function. Therefore, creating a database is a key step. This process can be automated using the <code class=\"language-text\">create_db.sh</code> script provided in the <code class=\"language-text\">securemilkcarton/databases</code> folder. Simply run the script using the following command (the following instructions assumes you have the repo in your home folder):</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~/SecureMilkCarton/securemilkcarton/databases\n./create_db.sh </code></pre></div>\n<p>You will be prompted to enter the password for the root user of the database account. If you followed the official documentation, this password will be: <code class=\"language-text\">passw0rd</code>.</p>\n<p>The primary action the script performs is depicted in the following code snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cat ~/SecureMilkCarton/securemilkcarton/database/securemilkcarton_db.sql | mysql -u root -p</code></pre></div>\n<p>This line of code prints the contents of <code class=\"language-text\">securemilkcarton_db.sql</code> file containing the database contents, and pipes the content into the <code class=\"language-text\">mysql</code> command which populates the database.</p>\n<h3 id=\"how-to-delete-and-recreate-the-database\" style=\"position:relative;\"><a href=\"#how-to-delete-and-recreate-the-database\" aria-label=\"how to delete and recreate the database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to delete and recreate the database</h3>\n<p>Similar to creating the database, you can also recreate the database using the same <code class=\"language-text\">securemilkcarton_db.sql</code> file. However, be warned… this script drops the entire <code class=\"language-text\">securemilkcarton</code> database and all entries. If you have made any modifications to the database contents, this information will be lost.</p>\n<p>Recreating the database can be automated using the <code class=\"language-text\">recreate_db.sh</code> script provided in the <code class=\"language-text\">securemilkcarton/databases</code> folder. Simply run the script using the following command (the following instructions assumes you have the repo in your home folder):</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~/SecureMilkCarton/securemilkcarton/databases\n./create_db.sh </code></pre></div>\n<p>You will be prompted to enter the password for the root user of the database account. If you followed the official documentation, this password will be: <code class=\"language-text\">passw0rd</code>. The first time you are prompted for the password is to drop the database, the second time you are prompted for the password is to create the database again.</p>\n<h3 id=\"how-to-compile-and-deploy\" style=\"position:relative;\"><a href=\"#how-to-compile-and-deploy\" aria-label=\"how to compile and deploy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to compile and deploy</h3>\n<p>This project uses a simple static technique to compile and deploy a Tomcat web application. This process can be automated using the <code class=\"language-text\">compile.sh</code> script provided in the <code class=\"language-text\">securemilkcarton/scripts</code> folder. Simply run the script using the following command (the following instructions assumes you have the repo in your home folder):</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">cd ~/SecureMilkCarton/securemilkcarton/scripts\nsudo ./compile.sh </code></pre></div>\n<p>Make sure you <em>use sudo to compile</em> the web application!</p>\n<p>Below is a snippet of the primary code that compiles and deploys the web application, which includes some comments to explain what each line achieves.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\"># Compile each of the three .java files\njavac -classpath \"/opt/tomcat/lib/servlet-api.jar\" ~/SecureMilkCarton/securemilkcarton/WEB-INF/classes/Login.java ~/SecureMilkCarton/securemilkcarton/WEB-INF/classes/Hashing.java\njavac -classpath \"/opt/tomcat/lib/servlet-api.jar\" ~/SecureMilkCarton/securemilkcarton/WEB-INF/classes/Noticeboard.java\n\n# Create a .war file to export to the Java Tomcat web server\njar -cf securemilkcarton.war *\n\n# Copy the .war file to the Java Tomcat web server\nsudo cp securemilkcarton.war /opt/tomcat/webapps/</code></pre></div>\n<h3 id=\"how-to-access-the-web-application\" style=\"position:relative;\"><a href=\"#how-to-access-the-web-application\" aria-label=\"how to access the web application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to access the web application</h3>\n<p>The web application is accessible through any web browser, however, it is recommended to use Mozilla Firefox or Google Chrome. The specific ports the web application are deployed on are:</p>\n<ul>\n<li>HTTP on port 8080</li>\n<li>HTTPS on port 8443 (not configured by default)</li>\n</ul>\n<p>Therefore, you can access the web application by using the following URL in your web browser:</p>\n<ul>\n<li><code class=\"language-text\">&lt;server-ip-address>:8080/securemilkcarton/</code></li>\n<li>For example: <code class=\"language-text\">192.168.1.10:8080/securemilkcarton/</code></li>\n</ul>\n<p>If you performed the optional step of changing the default ports you can access the web application using the following URL in your web browser:</p>\n<ul>\n<li><code class=\"language-text\">&lt;server-ip-address>/securemilkcarton/</code></li>\n<li>For example: <code class=\"language-text\">192.168.1.10/securemilkcarton/</code></li>\n</ul>\n<p>Since SecureMilkCarton is a vulnerable and terribly configured, web application it is not served using HTTPS by default. If you do implement HTTPS certificates, the web application will then be accessible using the following URLs:</p>\n<ul>\n<li><code class=\"language-text\">https://&lt;server-ip-address>:8443/securemilkcarton/</code> (if using port 8443)</li>\n<li>For example: <code class=\"language-text\">192.168.1.10:8443/securemilkcarton/</code></li>\n<li><code class=\"language-text\">https://&lt;server-ip-address>/securemilkcarton/</code> (if using port 443)</li>\n<li>For example: <code class=\"language-text\">https://192.168.1.10/securemilkcarton/</code></li>\n</ul>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>The entire point of the SecureMilkCarton project was to share the work. I designed it because I was unable to find any similar (robust) projects for learning how to secure web applications. With that being said, please feel free to contact me or post a comment if you would like to know anything about the project. Like I previously mentioned, also check out the <a href=\"https://github.com/thomaslaurenson/SecureMilkCarton\">SecureMilkCarton repository</a> to obtain the source code or review the technical documentation.</p>","frontmatter":{"title":"SecureMilkCarton - A Vulnerable Web App","date":"July 12, 2018","tags":["Teaching","Security","OWASP"],"description":"SecureMilkCarton - An intentionally vulnerable website designed to learn how to secure web applications.","thumbnail":"securemilkcarton.png"}},"previous":{"fields":{"slug":"/blog/2018-07-12/installing-and-configuring-DVWA/"},"frontmatter":{"title":"Installing and Configuring DVWA"}},"next":{"fields":{"slug":"/blog/2018-07-18/scripting-vrealize-automation-using-powershell/"},"frontmatter":{"title":"Scripting vRealize Automation using PowerShell"}}},"pageContext":{"id":"b0fd7acc-efe9-5dc7-9f34-efb80df2b9f1","previousPostId":"c46f66b1-e7ce-5cc7-9c7a-0b9f01053a98","nextPostId":"1d924a8b-72fa-5ea8-bdd5-77954bfe411e"}},"staticQueryHashes":["1771194231","2841359383","3880320062"]}