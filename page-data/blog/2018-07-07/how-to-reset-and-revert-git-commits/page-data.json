{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-07-07/how-to-reset-and-revert-git-commits/","result":{"data":{"site":{"siteMetadata":{"title":"Thomas Laurenson"}},"markdownRemark":{"id":"98717890-4a81-58c8-a3d7-8185c6e1c3c2","excerpt":"I am exceptionally pedantic about my git commits. However, since I started using git locally, I have become much more relaxed. I put on my headphones, blast…","html":"<p>I am exceptionally pedantic about my git commits. However, since I started using git locally, I have become much more relaxed. I put on my headphones, blast some Metallica, get in the zone, and git commit like a mad person! It is a great place to be. Furiously coding and committing at an important juncture. However, this led me into bad habits. Reckless is a better word for it. I generally commit with a descriptive message, and push at logical times… but have gotten less precise lately. I have so many accounts and repositories I contribute to that I sometimes enter in the wrong credentials. I have a GitHub account, a GitLab account, and another GitLab account which is for code hosted at my work-place. It gets confusing. And I refuse to use any credential managers (I can hear people screaming in agony at that comment!). Again, this leads to commits that need to be… <em>taken ‘a back</em>.</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#quickstart\">Quickstart</a></li>\n<li><a href=\"#how-to-undo-in-git\">How to Undo in Git</a></li>\n<li><a href=\"#example-scenario\">Example Scenario</a></li>\n<li><a href=\"#undoing-the-last-commit\">Undoing the Last Commit</a></li>\n<li><a href=\"#undoing-a-specific-commit\">Undoing a Specific Commit</a></li>\n<li>\n<p><a href=\"#how-to-undo-a-git-push\">How to Undo a Git Push</a></p>\n<ul>\n<li><a href=\"#words-of-caution\">Words of Caution</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>I was asking myself this question: how can I recover from an accidental <code class=\"language-text\">git commit</code> or <code class=\"language-text\">git push</code>? Which is basically summarised as: how to undo commits or pushes in git? After reading a few forum posts, riding the waves of stack overflow answers… I started to get it. I then performed a revert from a git push to my GitHub. The knowledge of how to do it was never achieved, mainly because I barely used this feature. Every time a </p>\n<p>This post will discuss how to undo unfortunate git commits… as well as git pushes. Hopefully, this post is useful to others as it was for me to document.</p>\n<h2 id=\"quickstart\" style=\"position:relative;\"><a href=\"#quickstart\" aria-label=\"quickstart permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quickstart</h2>\n<p>If you want a quick answer, here are the following commands to undo a <code class=\"language-text\">git commit</code>: </p>\n<ul>\n<li>\n<p>Undo the last commit and do not remove the changes:</p>\n<ul>\n<li><code class=\"language-text\">git reset --soft HEAD~1</code></li>\n</ul>\n</li>\n<li>\n<p>Undo the last commit and remove the changes (from disk):</p>\n<ul>\n<li><code class=\"language-text\">git reset --hard HEAD~1</code></li>\n</ul>\n</li>\n<li>\n<p>Undo a specific commit and do not remove the changes:</p>\n<ul>\n<li><code class=\"language-text\">git reset --soft &lt;commit-object-name></code></li>\n</ul>\n</li>\n<li>\n<p>Undo a specific commit and remove the changes (from disk):</p>\n<ul>\n<li><code class=\"language-text\">git reset --hard &lt;commit-object-name></code></li>\n</ul>\n</li>\n</ul>\n<p>Once you have fixed the <em>git index</em> you can now fix the GitHub repository. Only one command is needed, and it is irrelevant which method you used to undo the original commit:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git push origin master --force</code></pre></div>\n<p>If you want further information on what these commands are actually doing… keep reading!</p>\n<h2 id=\"how-to-undo-in-git\" style=\"position:relative;\"><a href=\"#how-to-undo-in-git\" aria-label=\"how to undo in git permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to Undo in Git</h2>\n<p>In the world of git (as used by GitHub) undoing something can be achieved using the following command:</p>\n<ol>\n<li><code class=\"language-text\">git reset</code></li>\n</ol>\n<p>It should be noted that there are other command arguments that sound like they could be useful. For example, the <code class=\"language-text\">revert</code> argument will move a git repository to a specific commit, but it will keep all existing commits. Technically, <strong>this is not undoing</strong> the commit history. </p>\n<h2 id=\"example-scenario\" style=\"position:relative;\"><a href=\"#example-scenario\" aria-label=\"example scenario permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example Scenario</h2>\n<p>The examples in this post use a simple git repository scenario. There is a git repository that contains four files: </p>\n<ol>\n<li><code class=\"language-text\">task1.py</code> with the commit message: <em>First commit: task1.py</em></li>\n<li><code class=\"language-text\">task2.py</code> with the commit message: <em>Second commit: task2.py</em></li>\n<li><code class=\"language-text\">task3.py</code> with the commit message: <em>Third commit: task3.py</em></li>\n<li><code class=\"language-text\">task4.py</code> with the commit message: <em>Fourth commit: task4.py</em></li>\n</ol>\n<p>Using the <code class=\"language-text\">git log</code> command, we can see the following commit history:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">$ git log --oneline\n6f81b42 (HEAD -> master) Fourth commit: task4.py\n385c1d1 Third commit: task3.py\n25a73a4 Second commit: task2.py\nb9fba9e First commit: task1.py</code></pre></div>\n<p>The output from the <code class=\"language-text\">git log</code> command is a summary of what has been committed. Each line has the following details:</p>\n<ol>\n<li>The commit object name (e.g., <code class=\"language-text\">6f81b42</code> and <code class=\"language-text\">385c1d1</code>). This value is actually 40 characters in length, however, the <code class=\"language-text\">git log --oneline</code> command only displays a partial prefix. We can still use this partial object name and do not require the complete name.</li>\n<li>The commit message (e.g., <em>Fourth commit: task4.py</em> and <em>Third commit: task3.py</em>)</li>\n</ol>\n<p>Please note the list displayed by the <code class=\"language-text\">git log</code> command is from <em>most recent</em> commit to the <em>oldest commit</em>. </p>\n<h2 id=\"undoing-the-last-commit\" style=\"position:relative;\"><a href=\"#undoing-the-last-commit\" aria-label=\"undoing the last commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undoing the Last Commit</h2>\n<p>We have not discussed this so far, but a git commit is greatly different from a git commit followed by a git push. If you have not <em>pushed</em> the repository yet (say to GitHub) this is the method to use to undo the last commit you made. The basic command to undo the last commit is:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset HEAD~1</code></pre></div>\n<p>The above command is only relevant for undoing the most recent commit. This is very similar to pressing the <em>Undo</em> button in Microsoft Word once. The option <code class=\"language-text\">HEAD~1</code> refers to the parent of the most recent commit. In the scenario example, we can see that the repository <code class=\"language-text\">HEAD</code> is the commit with the object name: <code class=\"language-text\">6f81b42</code> and the commit message: <em>Fourth commit: task4.py</em>. Basically, <code class=\"language-text\">HEAD~1</code> moves the <code class=\"language-text\">HEAD</code> value up one, in this case to the third commit.</p>\n<h4 id=\"undo-the-last-commit-and-do-not-remove-the-changes\" style=\"position:relative;\"><a href=\"#undo-the-last-commit-and-do-not-remove-the-changes\" aria-label=\"undo the last commit and do not remove the changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undo the last commit and do not remove the changes</h4>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset --soft HEAD~1</code></pre></div>\n<p>The <code class=\"language-text\">--soft</code> option does not remove the changes made. For example, when using <code class=\"language-text\">--soft</code>, the file <code class=\"language-text\">task4.py</code> is not removed from the disk (the file is not deleted), it is just removed from the <em>git index</em>.</p>\n<h4 id=\"undo-the-last-commit-and-remove-the-changes\" style=\"position:relative;\"><a href=\"#undo-the-last-commit-and-remove-the-changes\" aria-label=\"undo the last commit and remove the changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undo the last commit and remove the changes</h4>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset --hard HEAD~1</code></pre></div>\n<p>The <code class=\"language-text\">--hard</code> option removes the changes made. For example, when using <code class=\"language-text\">--hard</code>, the file <code class=\"language-text\">task4.py</code> is deleted from the disk (the file is deleted) and from the <em>git index</em>.</p>\n<h2 id=\"undoing-a-specific-commit\" style=\"position:relative;\"><a href=\"#undoing-a-specific-commit\" aria-label=\"undoing a specific commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undoing a Specific Commit</h2>\n<p>In the last section, we covered how to undo, or remove, the last commit made. In this section, we discuss how to undo a specific commit. You can use a very similar syntax, however, you need to replace <code class=\"language-text\">HEAD~1</code> with a specific object name. The basic command to undo a specific commit is:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset <commit-object-name></code></pre></div>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset 385c1d1</code></pre></div>\n<p>As previously discussed, the method to retrieve the commit history and the <em>commit object name</em> is to use the <code class=\"language-text\">git log</code> command. Specifically, the <code class=\"language-text\">--oneline</code> argument provides an excellent method to display all git commits is a simple and easy to navigate view, as illustrated in the code snippet below:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">$ git log --oneline\n6f81b42 (HEAD -> master) Fourth commit: task4.py\n385c1d1 Third commit: task3.py\n25a73a4 Second commit: task2.py\nb9fba9e First commit: task1.py</code></pre></div>\n<p>The following examples rely on finding the specific <em>commit object name</em> to use as input to the <code class=\"language-text\">git reset</code> command. However, <code class=\"language-text\">git log</code> is not the only method to determine this value. You can also see the full <em>commit object name</em> in your GitHub repository on the web interface - but, in my opinion, this is a more complex method.</p>\n<h4 id=\"undo-a-specific-commit-and-do-not-remove-the-changes\" style=\"position:relative;\"><a href=\"#undo-a-specific-commit-and-do-not-remove-the-changes\" aria-label=\"undo a specific commit and do not remove the changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undo a specific commit and do not remove the changes</h4>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset --soft <commit-object-name></code></pre></div>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset --soft 385c1d1</code></pre></div>\n<p>This command resets a git repository back to the specific commit object name of <code class=\"language-text\">385c1d1</code>. Similar to the example above, the <code class=\"language-text\">--soft</code> option does not remove the changes made. For example, when using <code class=\"language-text\">--soft</code>, the file <code class=\"language-text\">task4.py</code> is not removed from the disk (the file is not deleted), it is just removed from the <em>git index</em>.</p>\n<h4 id=\"undo-a-specific-commit-and-remove-the-changes\" style=\"position:relative;\"><a href=\"#undo-a-specific-commit-and-remove-the-changes\" aria-label=\"undo a specific commit and remove the changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undo a specific commit and remove the changes</h4>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset --hard <commit-object-name></code></pre></div>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git reset --hard 385c1d1</code></pre></div>\n<p>This command resets a git repository back to the specific commit object name of <code class=\"language-text\">385c1d1</code>. Similar to the example above, the <code class=\"language-text\">--hard</code> option removes the changes made. For example, when using <code class=\"language-text\">--hard</code>, the file <code class=\"language-text\">task4.py</code> is deleted from the disk (the file is deleted) and from the <em>git index</em>.</p>\n<h2 id=\"how-to-undo-a-git-push\" style=\"position:relative;\"><a href=\"#how-to-undo-a-git-push\" aria-label=\"how to undo a git push permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to Undo a Git Push</h2>\n<p>Once a <code class=\"language-text\">git reset</code> has been performed, it is relatively straightforward to undo a <code class=\"language-text\">git push</code>. Basically, GitHub will read the git index and display the information. Since we have already fixed (undone) the git index, we simply need to push the git repository again. This can be achieved using:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">git push origin master --force</code></pre></div>\n<p>The <code class=\"language-text\">--force</code> argument will delete previous commits and push the current local git repository.</p>\n<h3 id=\"words-of-caution\" style=\"position:relative;\"><a href=\"#words-of-caution\" aria-label=\"words of caution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Words of Caution</h3>\n<p>Please be aware that some of these techniques specified in this post to <em>undo git commits and pushes</em> are bad practices for public git repositories… especially when working with multiple developers. Basically, it is bad practice to <code class=\"language-text\">force</code> a push on a public git repository, and you should use <code class=\"language-text\">revert</code> instead. Maybe I have been a solo developer for too long!</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Git is a difficult tool to master. Unfortunately, the best method to understand how it operates is to have a thorough understanding of how the staging, indexing, and the remote repository work in conjunction. A fellow work colleague gave me some great advice about learning git. I told her that I had read all these articles and watched videos about how to use git correctly. She said, <em>“why don’t you just create a throw-away repository, and actually try it”</em>. It was amazing advice, and how I actually learned git.</p>","frontmatter":{"title":"How to Reset and Revert Git Commits","date":"July 07, 2018","tags":["Git"],"description":"Short tutorial of how to turn back time with Git commits.","thumbnail":"git.png"}},"previous":{"fields":{"slug":"/blog/2018-07-06/dragino-lorashield-node-configuration-for-AU915/"},"frontmatter":{"title":"Dragino LoRaShield Node Configuration for AU915 MHz"}},"next":{"fields":{"slug":"/blog/2018-07-08/metasploitable3-pentesting-the-ubuntu-linux-version-part1/"},"frontmatter":{"title":"Metasploitable3 - Pentesting the Ubuntu Linux Version (Part 1)"}}},"pageContext":{"id":"98717890-4a81-58c8-a3d7-8185c6e1c3c2","previousPostId":"3691f525-308f-5f3a-851b-0879f20c1e08","nextPostId":"ff31b458-54da-5325-8181-9da709962911"}},"staticQueryHashes":["1771194231","2841359383","3880320062"]}