{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-07-18/scripting-vrealize-automation-using-powershell/","result":{"data":{"site":{"siteMetadata":{"title":"Thomas Laurenson"}},"markdownRemark":{"id":"1d924a8b-72fa-5ea8-bdd5-77954bfe411e","excerpt":"I finally found an answer to a problem that had plagued me for months! How to script, or automate, tasks in vRealize; for example, destroying a deployed…","html":"<p>I finally found an answer to a problem that had plagued me for months! How to script, or automate, tasks in vRealize; for example, destroying a deployed blueprint. The answer was simpler than I initially thought… It turns out that the <em>Catalog Service</em> REST API provides all that functionality that is required to automate specific tasks such as request a Blueprint to be deployed (built), get the IP address of a VM, or destroy a deployed blueprint.</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"#vrealize-automation-7-rest-api-request-using-powershell\">vRealize Automation 7 REST API Request Using PowerShell</a></p>\n<ul>\n<li><a href=\"#connecting-to-a-vrealize-server\">Connecting to a vRealize server</a></li>\n<li><a href=\"#listing-catalog-items-listing-available-blueprints\">Listing Catalog Items (Listing Available Blueprints)</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>At my workplace, we use vSphere and vRealize to provide virtual machines to students for labs, assignments, and exams. Since we are using VMs in this many areas, it means that is a high overhead of managing numerous VMs. Think of having a class of 50 students, with approximately 3-6 VMs per course… resulting in large numbers of VMs to manage! I have PowerCLI scripts to perform many tasks on vSphere, yet had no solution to managing vRealize deployments or blueprints directly. That was until I read <a href=\"http://www.vmtocloud.com/how-to-script-a-vrealize-automation-7-rest-api-request/\">How to script a vRealize Automation 7 REST API request</a>, by Ryan Kelly. His vRealize Automation scripts were written in BASH… However, I wanted to use PowerShell. This is primarily due to my heavy use of the PowerCLI tool to manage vSphere, which is only available on Windows PowerShell.</p>\n<p>This post goes into detail about how to write a PowerShell script to automate connection to the vRealize Automation REST API. This post finishes with the most simple task, to list the names of any vRealize deployments that the user has access to. The post has the following prerequisites:</p>\n<ul>\n<li>An account with access to a vRealize server</li>\n<li>Windows PowerShell</li>\n</ul>\n<p>In addition, I have started to add PowerShell scripts and modules to my <a href=\"https://github.com/thomaslaurenson/vSphereScripts\">vSphereScripts\n</a> repository on GitHub. Like the currently available vSphere scripts, these are targeted to automate management of virtual machines.</p>\n<h2 id=\"vrealize-automation-7-rest-api-request-using-powershell\" style=\"position:relative;\"><a href=\"#vrealize-automation-7-rest-api-request-using-powershell\" aria-label=\"vrealize automation 7 rest api request using powershell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vRealize Automation 7 REST API Request Using PowerShell</h2>\n<p>The first thing to do is open <em>Windows PowerShell ISE</em> or <em>Visual Studio Code</em> and create a new file/script. Feel free to name it whatever you want, however, it is sensible to use the <code class=\"language-text\">.ps1</code> file extension to identify it as a PowerShell script.</p>\n<h3 id=\"connecting-to-a-vrealize-server\" style=\"position:relative;\"><a href=\"#connecting-to-a-vrealize-server\" aria-label=\"connecting to a vrealize server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting to a vRealize server</h3>\n<p>The first piece of information needed is the hostname of the vRealize server. For the sake of this tutorial, we will specify the following hostname: <code class=\"language-text\">https://vra01.corp.local/</code>. Add a line that specifies a variable named <code class=\"language-text\">$vra_server</code> that has the string of the server, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$vra_server</span> = <span class=\"token string\">\"https://vra01.corp.local/\"</span></code></pre></div>\n<p>This value will be used multiple times, for each API request. So it makes sense to store the information in a variable.</p>\n<p>In order to authenticate with the vRealize server, we must have valid credentials. We could use a simple approach to get the user credentials; either 1) Hard-code them into the script, or 2) Use the <code class=\"language-text\">Read-Host -Prompt</code> module. However, both of these are insecure. Instead, I recommend using the <code class=\"language-text\">Get-Credential</code> module, designed specifically for handling user credentials. The following code will ask the user for a username and password and store it in a <code class=\"language-text\">PSCredential</code> object. We can then extract the username and password from this object. Add the following line to your script.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$credentials</span>=<span class=\"token function\">Get-Credential</span> <span class=\"token operator\">-</span>Message <span class=\"token string\">\"Please enter your vRealize credentials\"</span></code></pre></div>\n<p>The <code class=\"language-text\">Get-Credential</code> module can be a little finicky to deal with. We will need to extract data from the <code class=\"language-text\">PSCredential</code> object later in the script. Next, we must specify the tenant address for vRealize. We will, again, store this in a variable for later use.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$tenant</span> = <span class=\"token string\">\"vsphere.local\"</span></code></pre></div>\n<p>The tenant name should be <code class=\"language-text\">vsphere.local</code>, as <a href=\"https://docs.vmware.com/en/vRealize-Automation/6.2/com.vmware.vra.62.upgrade.doc/GUID-FE589514-85C9-401C-9DF1-2983F0D3AAD1.html\">vRealize Automation requiquires vsphere.local as the default tenant name</a>. Ok, so far we have three key pieces of information: 1) Username, 2) Password and 3) Tenant. We must send this information, using a POST, to the REST API. We must also send this information in JSON format. So we should convert and combine the information into a single JSON object. The following code will perform this task, and store the information in a JSON object variable called <code class=\"language-text\">$data</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$data</span> = @<span class=\"token punctuation\">{</span>\n    username=<span class=\"token variable\">$credentials</span><span class=\"token punctuation\">.</span>username\n    password=<span class=\"token variable\">$credentials</span><span class=\"token punctuation\">.</span>GetNetworkCredential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>password\n    tenant=<span class=\"token variable\">$tenant</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$data</span> = <span class=\"token variable\">$data</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">ConvertTo-Json</span></code></pre></div>\n<p>It is important to quickly summarise what just happened. The <code class=\"language-text\">username=$credentials.username</code> line populates the username from <code class=\"language-text\">$credentials</code> (the <code class=\"language-text\">PSCredential</code> object) into the hash table. The password population is a little trickier. The password must be sent in plaintext, not a SecureString - as stored in the <code class=\"language-text\">PSCrential</code> object. The <em>Hey, Scripting Guy! Blog</em> provided excellent advice on how to <a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/2013/03/26/decrypt-powershell-secure-string-password/\">decrypt PowerShell secure string passwords</a> by using <code class=\"language-text\">GetNetworkCredential().password</code>. Finally, copying over the tenant information is a simple reference to the <code class=\"language-text\">$tenant</code> variable.</p>\n<p>Next, we need to craft the URL to perform the POST to. The suffix of the URL is <code class=\"language-text\">identity/api/tokens</code>, which can simply be added to the <code class=\"language-text\">$vra_server</code> variable to get the full URL. For example, the end result will be the following URL:</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">https://vra01.corp.local/identity/api/tokens</code></pre></div>\n<p>This is easily achieved using string concatenation:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$uri</span> = <span class=\"token variable\">$vra_server</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"identity/api/tokens\"</span></code></pre></div>\n<p>We now need to specify the correct headers for the API request. We need to specify what type of data we are sending, and what type of data we want to receive back. In both cases, we want to specify JSON. From my experience, the easiest and most flexible method is to use a dictionary to store multiple header variables. This is demonstrated in the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$header</span> = <span class=\"token function\">New-Object</span> <span class=\"token string\">\"System.Collections.Generic.Dictionary[[String],[String]]\"</span>\n<span class=\"token variable\">$header</span><span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$header</span><span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To summarize, on the first line we create a new dictionary with the variable name <code class=\"language-text\">$header</code> that has a key type of string and a value type of string. The second line specifies an <code class=\"language-text\">Accept</code> value of <code class=\"language-text\">application/json</code> so that we get JSON data back. The third line specifies a <code class=\"language-text\">Content-Type</code> of <code class=\"language-text\">application/json</code> so the server knows we are sending them JSON formatted data. </p>\n<p>Everything is now configured to actually perform authentication against the server and get a <strong>bearer token to be used in every future API request</strong>. This token is exceptionally important, and we can use it multiple times until the token is expired. It is sent with an expiry time, so you can determine how long it is valid for. </p>\n<p>To perform authentication and get the bearer token, we can leverage the <code class=\"language-text\">Invoke-RestMethod</code> module, and perform a <code class=\"language-text\">-Method Post</code>. Basically, we want to post the <code class=\"language-text\">$data</code> JSON object to the <code class=\"language-text\">$uri</code>. In other words, we post the credentials and tenant to the URL of the REST API. We must also specify that the POST should use the <code class=\"language-text\">$header</code> value we previously specified. Basically, that we are sending JSON, and want JSON back in return. It is useful to grab the <em>response</em>, a JSON object, and store it in a variable. The variable name we will use is <code class=\"language-text\">$response</code>. The following line of code performs the POST:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$response</span> = <span class=\"token function\">Invoke-RestMethod</span> <span class=\"token operator\">-</span>Method Post <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$header</span> <span class=\"token operator\">-</span>Body <span class=\"token variable\">$data</span></code></pre></div>\n<p>This is a very simple one-line solution. However, I prefer to wrap the REST request in a <code class=\"language-text\">try</code> and <code class=\"language-text\">catch</code> to check the result, so we have an idea if things go wrong. The following code snippet tries to perform the POST, and if it fails will print some useful information including the status code error, which can be very useful for debugging.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$response</span> = <span class=\"token function\">Invoke-RestMethod</span> <span class=\"token operator\">-</span>Method Post <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$header</span> <span class=\"token operator\">-</span>Body <span class=\"token variable\">$data</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"StatusCode:\"</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">.</span>value__\n    <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"StatusDescription:\"</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusDescription\n    <span class=\"token keyword\">exit</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final part, we need to extract the bearer token from the JSON we received back from the server. The <code class=\"language-text\">$response</code> variable will contain three values: 1) <code class=\"language-text\">expires</code> is a string value of when the token will expire, 2) <code class=\"language-text\">tenant</code> is another string value of the current tenant which should be <code class=\"language-text\">vsphere.local</code>, and 3) <code class=\"language-text\">id</code> which is a string value of the bearer token - <strong>this is the value we want!</strong> You can easily extract the bearer token using the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$bearer_token</span> = <span class=\"token variable\">$response</span><span class=\"token punctuation\">.</span>id</code></pre></div>\n<p>However, this approach has a major drawback… It is not in the correct format for subsequent REST requests. Any subsequent REST API requests will want the bearer token with a string <code class=\"language-text\">Bearer</code> before the actual token. For example: <code class=\"language-text\">Bearer 89ry29h293930r8uru</code>. We can leverage some string concatenation to achieve this:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$bearer_token</span> = <span class=\"token string\">\"Bearer \"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$response</span><span class=\"token punctuation\">.</span>id</code></pre></div>\n<p>Nicely done if you got this far and that you could successfully get the bearer token. This is somewhat challenging, but means we are now authenticated with the vRealize server and can now perform some actually useful REST API requests using our bearer token! The full script is provided below for reference.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$vra_server</span> = <span class=\"token string\">\"https://vra01.corp.local/\"</span>\n\n<span class=\"token variable\">$credentials</span>=<span class=\"token function\">Get-Credential</span> <span class=\"token operator\">-</span>Message <span class=\"token string\">\"Please enter your vRealize credentials\"</span>\n\n<span class=\"token variable\">$tenant</span> = <span class=\"token string\">\"vsphere.local\"</span>\n\n<span class=\"token variable\">$data</span> = @<span class=\"token punctuation\">{</span>\n    username=<span class=\"token variable\">$credentials</span><span class=\"token punctuation\">.</span>username\n    password=<span class=\"token variable\">$credentials</span><span class=\"token punctuation\">.</span>GetNetworkCredential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>password\n    tenant=<span class=\"token variable\">$tenant</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$data</span> = <span class=\"token variable\">$data</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">ConvertTo-Json</span>\n\n<span class=\"token variable\">$uri</span> = <span class=\"token variable\">$vra_server</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"identity/api/tokens\"</span>\n\n<span class=\"token variable\">$header</span> = <span class=\"token function\">New-Object</span> <span class=\"token string\">\"System.Collections.Generic.Dictionary[[String],[String]]\"</span>\n<span class=\"token variable\">$header</span><span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$header</span><span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$response</span> = <span class=\"token function\">Invoke-RestMethod</span> <span class=\"token operator\">-</span>Method Post <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$header</span> <span class=\"token operator\">-</span>Body <span class=\"token variable\">$data</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"StatusCode:\"</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">.</span>value__\n    <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"StatusDescription:\"</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusDescription\n    <span class=\"token keyword\">exit</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$bearer_token</span> = <span class=\"token string\">\"Bearer \"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$response</span><span class=\"token punctuation\">.</span>id</code></pre></div>\n<h3 id=\"listing-catalog-items-listing-available-blueprints\" style=\"position:relative;\"><a href=\"#listing-catalog-items-listing-available-blueprints\" aria-label=\"listing catalog items listing available blueprints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listing Catalog Items (Listing Available Blueprints)</h3>\n<p>Now that we have authenticated with the vRealize server, we can perform some useful tasks. To start, we will simply list the Blueprints - these are vRealize Blueprints that are available to the authenticated user! This is a very simple example but will provide the basis on what can be achieved and guide future tasks that can be performed.</p>\n<p>The <code class=\"language-text\">entitledCatalogItemViews</code> is the resource needed that is provided in the <em>Catalog Consumer REST API</em>. The <code class=\"language-text\">entitledCatalogItemViews</code> will provide a list of catalog items (blueprints) that are active, associated with a service, and that the user we have authenticated with had entitlements to <em>consume</em>. Basically, catalog items that we are entitled to view, and use.</p>\n<p>The following example will continue adding to the script we started above. So you will notice that we will re-use some variables we have already defined. Start by updating the <code class=\"language-text\">$uri</code> to perform a request of <code class=\"language-text\">entitledCatalogItemViews</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$uri</span> = <span class=\"token variable\">$vra_server</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"catalog-service/api/consumer/entitledCatalogItemViews\"</span></code></pre></div>\n<p>Next, we will need to add the bearer token to the already defined <code class=\"language-text\">$header</code> variable. We must define this additional header, or else we will get an unauthenticated error. We can simply add another dictionary entry with the key value of <code class=\"language-text\">Authentication</code>, and the value set to the contents of the <code class=\"language-text\">$bearer_token</code> variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$header</span><span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$bearer_token</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, we will use the <code class=\"language-text\">Invoke-RestMethod</code> again. However, this time we will specify a <code class=\"language-text\">-Method Get</code> because we are <em>getting</em> information from the vRealize server.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$entitled_blueprints</span> = <span class=\"token function\">Invoke-RestMethod</span> <span class=\"token operator\">-</span>Method Get <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$header</span></code></pre></div>\n<p>This is very similar to the previous <code class=\"language-text\">Invoke-RestMethod</code> that we used. This time we <em>get</em> data from the <code class=\"language-text\">entitledCatalogItemViews</code> API with the specified headers - including the bearer token. We save the resultant output in the variable named <code class=\"language-text\">$entitled_blueprints</code>. The information we get back is exceptionally useful and forms the basis of automated requesting of Blueprints in vRealize.</p>\n<p>Finally, we will loop through the JSON object that was returned and simply print the name of the vRealize blueprints we have access to. This is easily achieved using the following loop. Note how we use <code class=\"language-text\">$entitled_blueprints.content</code>. This structure is an array of each Blueprint available.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Write-Host</span> <span class=\"token string\">\">>> Found the following vRealize Deployments...\"</span>\n<span class=\"token keyword\">ForEach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$blueprint</span> in <span class=\"token variable\">$entitled_blueprints</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"  >\"</span> <span class=\"token variable\">$blueprint</span><span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The script should print out something similar to the output below. I just made up the virtual machine names to provide an example.</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">>>> Found the following vRealize Deployments...\n  > Ubuntu_WebServer\n  > Ubuntu-Server-Docker\n  > Windows-Server-2016\n  > CentOS-BaseInstall</code></pre></div>\n<p>From here we could perform tasks like request a blueprint to be deployed. Very nice! To get an idea of the information available I have included a full JSON object for one vRealize deployment. As you can see the information is very detailed. Moreover, the information is highly useful when </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"ConsumerEntitledCatalogItemView\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"entitledOrganizations\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span>\n                                    <span class=\"token string\">\"@{tenantRef=vsphere.local; tenantLabel=vsphere.local; subtenantRef=cb222bf4-7f3d-4a51-b94a-62fcfecece3b; subtenantLabel=WORK_BG}\"</span>\n                                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"catalogItemId\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"56588c8c-f593-4546-8854-b7f56c879771\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"Linux-TrainingVM\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"A Training VM for Linux.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isNoteworthy\"</span><span class=\"token operator\">:</span>  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dateCreated\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"2018-07-12T19:36:50.981Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lastUpdatedDate\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"2018-07-12T23:17:09.098Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">[</span>\n                    \"@<span class=\"token punctuation\">{</span>@type=link; rel=GET<span class=\"token operator\">:</span> Request Template; href=https<span class=\"token operator\">:</span><span class=\"token comment\">//vra01.corp.local/catalog-service/api/consumer/entitledCatalogItems/5658ac8c-f593-4546-8854-b7f5d4879771/r</span>\nequests/template<span class=\"token punctuation\">{</span>?businessGroupId<span class=\"token punctuation\">,</span>requestedFor<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">,</span>\n                    \"@<span class=\"token punctuation\">{</span>@type=link; rel=POST<span class=\"token operator\">:</span> Submit Request; href=https<span class=\"token operator\">:</span><span class=\"token comment\">//vra01.corp.local/catalog-service/api/consumer/entitledCatalogItems/5658ac8c-f593-4546-8854-b7f56ce39771/re</span>\nquests<span class=\"token punctuation\">{</span>?businessGroupId<span class=\"token punctuation\">,</span>requestedFor<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"iconId\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"composition.blueprint.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"catalogItemTypeRef\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">{</span>\n                                <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"com.vmware.csp.component.cafe.composition.blueprint\"</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"Composite Blueprint\"</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serviceRef\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">{</span>\n                        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"f8e4c658-24d1-4af0-ab58-04e991b143ae\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"Linux\"</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outputResourceTypeRef\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">{</span>\n                                    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"composition.resource.type.deployment\"</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span>  <span class=\"token string\">\"Deployment\"</span>\n                                <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To give you some ideas of what you can do with this information here are some examples and discussion. You can select a specific Blueprint from the JSON array using the index number. For example, the Blueprint I wanted to view information about is indexed at <code class=\"language-text\">10</code>, so I can use the following code to print only the JSON object for that Blueprint:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$entitled_blueprints</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">[</span>10<span class=\"token punctuation\">]</span></code></pre></div>\n<p>After knowing the Blueprint index, you could determine the URL needed to request the template using the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$entitled_blueprints</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">[</span>10<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>href</code></pre></div>\n<p>There are two links provided, one for requesting a template (index <code class=\"language-text\">0</code>) and one for submitting a request (index <code class=\"language-text\">1</code>). I know, this is getting a little messy, but you would not usually be dynamically determining this information in a script… Rather you would query the REST API for the URL manually, then write a script to automate multiple Blueprint requests. </p>\n<p>The best method to learn how to use the information returned by the REST API is to dynamically program and test things in PowerShell. This is one of the great benefits of using PowerShell for this type of problem. Also, there is pretty good documentation provided on the vRealize server available at the following URL (make sure to change the domain name <code class=\"language-text\">vra01.corp.local</code> to the actual address of your vRealize server).</p>\n<div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">https://vra01.corp.local/component-registry/services/docs</code></pre></div>\n<p>On this vRealize hosted site you can view the documentation for the vRealize REST API and all of the functions and features provided. </p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>This post covered how to connect to a vRealize REST API using Windows PowerShell and print information about vRealize Blueprints. This was a revelation to myself and will definitely make my life easier. Please leave a comment if you have any questions or feedback. Also, please let me know if this was useful, as I might continue this post with a series about common tasks that can be automated using the vRealize REST API… using PowerShell, of course!</p>","frontmatter":{"title":"Scripting vRealize Automation using PowerShell","date":"July 18, 2018","tags":["vRealize","vSphere","PowerShell"],"description":"How to script, or automate, tasks in vRealize - for example, destroying a deployed blueprint.","thumbnail":"virtualization.png"}},"previous":{"fields":{"slug":"/blog/2018-07-14/SecureMilkCarton-a-vulnerable-web-app/"},"frontmatter":{"title":"SecureMilkCarton - A Vulnerable Web App"}},"next":{"fields":{"slug":"/blog/2018-07-21/dragino-lorashield-on-AU915/"},"frontmatter":{"title":"Dragino LoraShield on AU915"}}},"pageContext":{"id":"1d924a8b-72fa-5ea8-bdd5-77954bfe411e","previousPostId":"b0fd7acc-efe9-5dc7-9f34-efb80df2b9f1","nextPostId":"0980df65-e66b-535b-994e-530228c9a215"}},"staticQueryHashes":["1771194231","2841359383","3880320062"]}